name: ci/cd

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build:
    # The type of runner that the job will run on
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }} 
    strategy:
      fail-fast: false
      matrix:
        config: 
        - {
            name: "Windows Latest MSVC",
            os: windows-latest,
            artifact: "windows_msvc",
            build_type: "Release",
          }
        - {
            name: "Ubuntu_Latest_GCC",
            os: ubuntu-latest,
            artifact: "ubuntu_gcc",
            build_type: "Release",
          }
    steps:
      - uses: actions/checkout@v3
      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main
        with:
          version: 1.62.0
      - name: Conan version
        run: echo "${{ steps.conan.outputs.version }}"

      - name: Install dependencies on windows
        if: startsWith(matrix.config.os, 'windows')
        run: |
          choco install ninja cmake
          ninja --version
          cmake --version

      - name: Install dependencies on ubuntu
        if: startsWith(matrix.config.name, 'Ubuntu_Latest_GCC')
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake
          ninja --version
          cmake --version
          gcc --version
          sudo add-apt-repository universe
          sudo apt-get update -y
          sudo apt-get install -y autoconf-archive libxmu-dev libdbus-1-dev libxtst-dev libxi-dev libxinerama-dev libxcursor-dev xorg-dev libgl-dev libglu1-mesa-dev pkg-config
          sudo apt-get install -y libxcb-util0-dev libxcb-util-dev libx11-xcb-dev libxcb-render-util0-dev libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-xinerama0-dev libxcb-dri3-dev libxcb-cursor-dev

      - name: Use cmake
        run: cmake  -S./ -B./build -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }} && cmake --build ./build --config ${{ matrix.config.build_type }}

      - name: Archive Release
        uses: thedoctor0/zip-release@0.7.5
        with:
          type: 'zip'
          filename: ${{ matrix.config.artifact }}.zip
          directory: ${{ github.workspace }}/build/bin

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.config.artifact }}
          path: ${{ github.workspace }}/build/bin/${{ matrix.config.artifact }}.zip
      
      - name: Read release.md and use it as a body of new release
        id: read_release
        shell: bash
        run: |
          title=$(awk '/^#[^#]/ { print substr($0, 2); exit }' RELEASE.md)
          echo "RELEASE_TITLE=$title" >> $GITHUB_ENV
      - name: Read RELEASE.md
        id: release
        uses: jaywcjlove/github-action-read-file@main
        with:
          path: RELEASE.md
      
      - name: Read VERSION
        id: version
        uses: jaywcjlove/github-action-read-file@main
        with:
          path: VERSION

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.TOKEN }}
          file: ${{ github.workspace }}/build/bin/${{ matrix.config.artifact }}.zip
          tag: "${{ steps.version.outputs.content }}"
          overwrite: true
          body:  "${{ steps.release.outputs.content }}"